from qts.utils.exchange.huobi.constant.result import OutputKey
from qts.utils.exchange.huobi.impl.utils.channelparser import ChannelParser
from qts.utils.exchange.huobi.model import *


class PriceDepthRequest:
    """
    The price depth received by subscription of price depth.

    :member
        symbol: The symbol you subscribed.
        timestamp: The UNIX formatted timestamp generated by server in UTC.
        data: The price depth.

    """

    def __init__(self):
        self.symbol = ""
        self.timestamp = 0
        self.ch = ""
        self.id = ""

        self.data = PriceDepth()


    @staticmethod
    def json_parse(json_wrapper):
        ch = json_wrapper.get_string(OutputKey.KeyChannelRep)
        parse = ChannelParser(ch)
        price_depth_event = PriceDepthEvent()
        price_depth_event.symbol = parse.symbol
        price_depth_event.timestamp = json_wrapper.get_int("ts")
        price_depth_event.ch = ch
        price_depth_event.id = json_wrapper.get_string("id")
        data = json_wrapper.get_object(OutputKey.KeyData)
        price_depth = PriceDepth.json_parse(data)
        price_depth_event.data = price_depth
        return price_depth_event
